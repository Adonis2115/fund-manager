// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const createStock = `-- name: CreateStock :one
INSERT INTO stocks (
    id, name, symbol, customSymbol, scriptType, industry, isin, fno
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at, name, symbol, customsymbol, scripttype, industry, isin, fno
`

type CreateStockParams struct {
	ID           int64
	Name         string
	Symbol       string
	Customsymbol string
	Scripttype   string
	Industry     string
	Isin         string
	Fno          bool
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, createStock,
		arg.ID,
		arg.Name,
		arg.Symbol,
		arg.Customsymbol,
		arg.Scripttype,
		arg.Industry,
		arg.Isin,
		arg.Fno,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Symbol,
		&i.Customsymbol,
		&i.Scripttype,
		&i.Industry,
		&i.Isin,
		&i.Fno,
	)
	return i, err
}

const getStock = `-- name: GetStock :one
SELECT id, created_at, updated_at, name, symbol, customsymbol, scripttype, industry, isin, fno FROM stocks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStock(ctx context.Context, id int64) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStock, id)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Symbol,
		&i.Customsymbol,
		&i.Scripttype,
		&i.Industry,
		&i.Isin,
		&i.Fno,
	)
	return i, err
}

const getStocks = `-- name: GetStocks :many
SELECT id, created_at, updated_at, name, symbol, customsymbol, scripttype, industry, isin, fno FROM stocks
ORDER BY name
`

func (q *Queries) GetStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Symbol,
			&i.Customsymbol,
			&i.Scripttype,
			&i.Industry,
			&i.Isin,
			&i.Fno,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
