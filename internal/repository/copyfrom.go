// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForBulkCreateDaily implements pgx.CopyFromSource.
type iteratorForBulkCreateDaily struct {
	rows                 []BulkCreateDailyParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreateDaily) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreateDaily) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Stockid,
		r.rows[0].Open,
		r.rows[0].High,
		r.rows[0].Low,
		r.rows[0].Close,
		r.rows[0].Volume,
		r.rows[0].Timestamp,
	}, nil
}

func (r iteratorForBulkCreateDaily) Err() error {
	return nil
}

func (q *Queries) BulkCreateDaily(ctx context.Context, arg []BulkCreateDailyParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"daily"}, []string{"id", "stockid", "open", "high", "low", "close", "volume", "timestamp"}, &iteratorForBulkCreateDaily{rows: arg})
}

// iteratorForBulkCreateStocks implements pgx.CopyFromSource.
type iteratorForBulkCreateStocks struct {
	rows                 []BulkCreateStocksParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreateStocks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreateStocks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].Symbol,
		r.rows[0].Scripttype,
		r.rows[0].Industry,
		r.rows[0].Isin,
		r.rows[0].Fno,
	}, nil
}

func (r iteratorForBulkCreateStocks) Err() error {
	return nil
}

func (q *Queries) BulkCreateStocks(ctx context.Context, arg []BulkCreateStocksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"stocks"}, []string{"id", "name", "symbol", "scripttype", "industry", "isin", "fno"}, &iteratorForBulkCreateStocks{rows: arg})
}
